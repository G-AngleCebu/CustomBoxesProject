<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="84.0896">
                        <Box name="Say" id="3" localization="8" tooltip="" x="118" y="191">
                            <bitmap>../../../../../../../../Users/hiroaki/Desktop/Customsay.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
            GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
            GeneratedClass.__init__( self )
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        self.sentences = {
            "Chinese" : " 你好 ",
            "English" : " Hello ",
            "French" : " Bonjour ",
            "German" : " Hallo ",
            "Italian" : " Ciao ",
            "Japanese" : " こんにちは ",
            "Korean" : " 안녕하세요 ",
            "Portuguese" : " Olá ",
            "Brazilian" : " Olá ",
            "Spanish" : " Hola ",
            "Arabic" : " مرحبا ",
            "Polish" : " Cześć ",
            "Czech" : " Ahoj ",
            "Dutch" : " Hallo ",
            "Danish" : " Hej ",
            "Finnish" : " Hei ",
            "Swedish" : " Hallå ",
            "Russian" : " Привет ",
            "Turkish" : " Merhaba "
        }

        self.foreign_words = ['你好','Hello','Bonjour','Hallo','Ciao','こんにちは','안녕하세요','Olá','Hola','مرحبا','Cześć','Ahoj','Hej','Hei','Hallå','Привет','Merhaba']

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        text = self.translate_text()
        self.onStopped(self.sentences[self.sDefaultLang])
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice Shaping (%)") ) + "\ "
            sentence += str(text)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)

    def translate_text(self):
        '''Translates "Hello" string to other languages if the string is not changed'''
        self.text = self.getParameter("Text")
        self.sDefaultLang = self.getParameter("Language")

        if str(self.text) in self.foreign_words:
            return self.sentences[self.sDefaultLang]
            self.tts.say(str(self.text))
        else:
            return self.text]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="Voice Shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="" id="6" />
                            <Parameter name="Text" inherits_from_parent="0" content_type="3" value="こんにちは" default_value="こんにちは" custom_choice="1" tooltip="" id="7" />
                            <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Japanese" default_value="Japanese" custom_choice="0" tooltip="" id="8">
                                <Choice value="English" />
                                <Choice value="Japanese" />
                                <Choice value="French" />
                                <Choice value="German" />
                                <Choice value="Italian" />
                                <Choice value="Korean" />
                                <Choice value="Portuguese" />
                                <Choice value="Brazilian" />
                                <Choice value="Spanish" />
                                <Choice value="Arabic" />
                                <Choice value="Polish" />
                                <Choice value="Czech" />
                                <Choice value="Dutch" />
                                <Choice value="Danish" />
                                <Choice value="Finnish" />
                                <Choice value="Swedish" />
                                <Choice value="Russian" />
                                <Choice value="Turkish" />
                            </Parameter>
                        </Box>
                        <Box name="Database" id="1" localization="8" tooltip="" x="115" y="7">
                            <bitmap>../../../../../../../../Users/hiroaki/Desktop/dbicon.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import webbrowser
import os
import sys
from mysql.connector import (connection)
from mysql.connector import errorcode
import datetime

#Welcom to the git world geraldine

class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy("ALTextToSpeech")
        self.table="pepper_test"
        self.col_list = ['id','text','date']
        GeneratedClass.__init__(self)

    def onInput_onStart(self):
        try:
            self.read_database()
        except:
            self.tts.say("Error in parameter. Make sure to put commas(,) and spacing in between attributes.")
        self.onStopped()
        pass

    def read_database(self):
        '''Read from the Databse'''
        try:
            cnx = connection.MySQLConnection(user=str(self.getParameter("User")),
                                             password=str(self.getParameter("Password")),
                                             host=str(self.getParameter("Host")),
                                             database=str(self.getParameter("Database")))
            self.tts.say("SUCCESS: Connected to the database")
        except:
            self.tts.say("ERROR: Failed to connect to the database")
        else:
            cursor = cnx.cursor()
            SELECT = self.getParameter("Select")
            FROM = self.getParameter("Table")
            WHERE = self.getParameter("Where")

            query = (SELECT+" "+FROM+" "+WHERE)
            cursor.execute(query)


            if '*' in SELECT or ('id' in SELECT and 'name' in SELECT and 'flag' in SELECT):
                for (id,name,flag) in cursor:
                  self.tts.say("{}, {}, {}".format(id, name, flag))
            elif 'id' in SELECT and 'name' not in SELECT and 'flag' not in SELECT:
                for (id) in cursor:
                  self.tts.say("{}".format(id).replace("(","").replace(",)",""))
            elif 'id' not in SELECT and 'name' in SELECT and 'flag' not in SELECT:
                for (name) in cursor:
                  self.tts.say("{}".format(name).replace("(u'","").replace("',)",""))
            elif 'id' not in SELECT and 'name' not in SELECT and 'flag' in SELECT:
                for (flag) in cursor:
                    self.tts.say("{}".format(flag).replace("(","").replace(",)",""))
            elif 'id' not in SELECT and 'name' in SELECT and 'flag' in SELECT:
                for (name,flag) in cursor:
                    self.tts.say("{}, {}".format(name, flag))
            elif 'id' in SELECT and 'name' in SELECT and 'flag' not in SELECT:
                for (id,name) in cursor:
                    self.tts.say("{}, {}".format(id, name))
            elif 'id' in SELECT and 'name' not in SELECT and 'flag' in SELECT:
                for (id,flag) in cursor:
                    self.tts.say("{}, {}".format(id, flag))

            cursor.close()
            cnx.close()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="User" inherits_from_parent="0" content_type="3" value="temp" default_value="temp" custom_choice="1" tooltip="" id="5" />
                            <Parameter name="Password" inherits_from_parent="0" content_type="3" value="g67r0tw3qb" default_value="g67r0tw3qb" custom_choice="0" password="1" tooltip="" id="6" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="153.121.39.201" default_value="153.121.39.201" custom_choice="1" tooltip="" id="7" />
                            <Parameter name="Database" inherits_from_parent="0" content_type="3" value="pepperdb" default_value="pepperdb" custom_choice="1" tooltip="" id="8" />
                            <Parameter name="Select" inherits_from_parent="0" content_type="3" value="SELECT *" default_value="SELECT *" custom_choice="1" tooltip="" id="9" />
                            <Parameter name="Table" inherits_from_parent="0" content_type="3" value="FROM pepper_test" default_value="FROM pepper_test" custom_choice="1" tooltip="" id="10" />
                            <Parameter name="Where" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="11" />
                        </Box>
                        <Box name="Multiple If" id="6" localization="8" tooltip="Enter tooltip here" x="286" y="98">
                            <bitmap>../../../../../../../../Users/hiroaki/Downloads/arrows_icon.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                            <Output name="value1_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                            <Output name="value1_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="value2_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="value2_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="value3_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="value3_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Output name="value4_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                            <Output name="value4_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                            <Output name="value5_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                            <Output name="value5_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                            <Parameter name="Condition 1" inherits_from_parent="0" content_type="3" value="1 &lt;= 0" default_value="1 &lt;= 0" custom_choice="0" tooltip="" id="13" />
                            <Parameter name="Condition 2" inherits_from_parent="0" content_type="3" value="1 &lt;= 0" default_value="1 &lt;= 0" custom_choice="0" tooltip="" id="14" />
                            <Parameter name="Condition 3" inherits_from_parent="0" content_type="3" value="1 &lt;= 0" default_value="1 &lt;= 0" custom_choice="0" tooltip="" id="15" />
                            <Parameter name="Condition 4" inherits_from_parent="0" content_type="3" value="1 &lt;= 0" default_value="1 &lt;= 0" custom_choice="0" tooltip="" id="16" />
                            <Parameter name="Condition 5" inherits_from_parent="0" content_type="3" value="1 &lt;= 0" default_value="1 &lt;= 0" custom_choice="0" tooltip="" id="17" />
                            <Parameter name="Custom first value" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="18" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="50">
                                            <Box name="If" id="2" localization="8" tooltip="" x="515" y="35">
                                                <bitmap>../../../../../../../../Users/hiroaki/Downloads/arrows_icon.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import re
class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        self.passedVal = p
        string = self.getParameter(str(self.getParameter("Condition")))

        try:
            if string:
                self.values = []
                self.operator = ''

                for t in string.split():
                    try:
                        if t.isdigit():
                            self.values.append(float(t))
                        else:
                            self.operator = t
                    except ValueError:
                        pass

                compare = self.compare_values()

                if compare is True:
                    self.value_true()
                elif compare is False:
                    self.value_false()
                else:
                    pass
            else:
                pass
        except IndexError:
            self.tts.say("Invalid Paramter Format in "+str(self.getParameter("Condition")))
            self.tts.say("Parameter should have 2 values and 1 operator like (1 <= 0). Check also the spacing.")
            pass

    def compare_values(self):
        isCustomVal = self.getParameter("Custom first value")
        val1 = self.values[0] if isCustomVal else self.passedVal
        val2 = self.values[1]
        x = ''

        if str(self.operator) == "<":
            x = val1 < val2
        elif str(self.operator) == "<=":
            x = val1 <= val2
        elif str(self.operator) == "==":
            x = val1 == val2
        elif str(self.operator) == ">=":
            x = val1 >= val2
        elif str(self.operator) == ">":
            x = val1 > val2
        elif str(self.operator) == "!=":
            x = val1 != val2
        return x]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="value_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="value_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Condition" inherits_from_parent="0" content_type="3" value="Condition 1" default_value="Condition 1" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="If (1)" id="1" localization="8" tooltip="" x="520" y="128">
                                                <bitmap>../../../../../../../../Users/hiroaki/Downloads/arrows_icon.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import re
class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        self.passedVal = p
        string = self.getParameter(str(self.getParameter("Condition")))

        if string:
            self.values = []
            self.operator = ''

            for t in string.split():
                try:
                    if t.isdigit():
                        self.values.append(float(t))
                    else:
                        self.operator = t
                except ValueError:
                    pass

            compare = self.compare_values()

            if compare is True:
                self.value_true()
            elif compare is False:
                self.value_false()
            else:
                pass
        else:
            pass

    def compare_values(self):
        isCustomVal = self.getParameter("Custom first value")
        val1 = self.values[0] if isCustomVal else self.passedVal
        val2 = self.values[1]
        x = ''

        if str(self.operator) == "<":
            x = val1 < val2
        elif str(self.operator) == "<=":
            x = val1 <= val2
        elif str(self.operator) == "==":
            x = val1 == val2
        elif str(self.operator) == ">=":
            x = val1 >= val2
        elif str(self.operator) == ">":
            x = val1 > val2
        elif str(self.operator) == "!=":
            x = val1 != val2
        return x]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="value_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="value_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Condition" inherits_from_parent="0" content_type="3" value="Condition 2" default_value="Condition 1" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="If (2)" id="3" localization="8" tooltip="" x="524" y="222">
                                                <bitmap>../../../../../../../../Users/hiroaki/Downloads/arrows_icon.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import re
class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        self.passedVal = p
        string = self.getParameter(str(self.getParameter("Condition")))

        if string:
            self.values = []
            self.operator = ''

            for t in string.split():
                try:
                    if t.isdigit():
                        self.values.append(float(t))
                    else:
                        self.operator = t
                except ValueError:
                    pass

            compare = self.compare_values()

            if compare is True:
                self.value_true()
            elif compare is False:
                self.value_false()
            else:
                pass
        else:
            pass

    def compare_values(self):
        isCustomVal = self.getParameter("Custom first value")
        val1 = self.values[0] if isCustomVal else self.passedVal
        val2 = self.values[1]
        x = ''

        if str(self.operator) == "<":
            x = val1 < val2
        elif str(self.operator) == "<=":
            x = val1 <= val2
        elif str(self.operator) == "==":
            x = val1 == val2
        elif str(self.operator) == ">=":
            x = val1 >= val2
        elif str(self.operator) == ">":
            x = val1 > val2
        elif str(self.operator) == "!=":
            x = val1 != val2
        return x]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="value_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="value_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Condition" inherits_from_parent="0" content_type="3" value="Condition 3" default_value="Condition 1" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="If (3)" id="4" localization="8" tooltip="" x="530" y="312">
                                                <bitmap>../../../../../../../../Users/hiroaki/Downloads/arrows_icon.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import re
class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        self.passedVal = p
        string = self.getParameter(str(self.getParameter("Condition")))

        if string:
            self.values = []
            self.operator = ''

            for t in string.split():
                try:
                    if t.isdigit():
                        self.values.append(float(t))
                    else:
                        self.operator = t
                except ValueError:
                    pass

            compare = self.compare_values()

            if compare is True:
                self.value_true()
            elif compare is False:
                self.value_false()
            else:
                pass
        else:
            pass

    def compare_values(self):
        isCustomVal = self.getParameter("Custom first value")
        val1 = self.values[0] if isCustomVal else self.passedVal
        val2 = self.values[1]
        x = ''

        if str(self.operator) == "<":
            x = val1 < val2
        elif str(self.operator) == "<=":
            x = val1 <= val2
        elif str(self.operator) == "==":
            x = val1 == val2
        elif str(self.operator) == ">=":
            x = val1 >= val2
        elif str(self.operator) == ">":
            x = val1 > val2
        elif str(self.operator) == "!=":
            x = val1 != val2
        return x]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="value_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="value_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Condition" inherits_from_parent="0" content_type="3" value="Condition 4" default_value="Condition 1" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="If (4)" id="5" localization="8" tooltip="" x="534" y="404">
                                                <bitmap>../../../../../../../../Users/hiroaki/Downloads/arrows_icon.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import re
class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        self.passedVal = p
        string = self.getParameter(str(self.getParameter("Condition")))

        if string:
            self.values = []
            self.operator = ''

            for t in string.split():
                try:
                    if t.isdigit():
                        self.values.append(float(t))
                    else:
                        self.operator = t
                except ValueError:
                    pass

            compare = self.compare_values()

            if compare is True:
                self.value_true()
            elif compare is False:
                self.value_false()
            else:
                pass
        else:
            pass

    def compare_values(self):
        isCustomVal = self.getParameter("Custom first value")
        val1 = self.values[0] if isCustomVal else self.passedVal
        val2 = self.values[1]
        x = ''

        if str(self.operator) == "<":
            x = val1 < val2
        elif str(self.operator) == "<=":
            x = val1 <= val2
        elif str(self.operator) == "==":
            x = val1 == val2
        elif str(self.operator) == ">=":
            x = val1 >= val2
        elif str(self.operator) == ">":
            x = val1 > val2
        elif str(self.operator) == "!=":
            x = val1 != val2
        return x]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="value_true" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="value_false" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Condition" inherits_from_parent="0" content_type="3" value="Condition 5" default_value="Condition 1" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="9" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="10" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="11" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="12" outputowner="5" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Number Edit" id="2" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="111" y="114">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(169)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>169</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="SAY TRUE" id="5" localization="8" tooltip="" x="551" y="111">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tts.say("TRUE")
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="SAY FALSE" id="4" localization="8" tooltip="" x="553" y="226">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy('ALTextToSpeech')
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tts.say("FALSE")
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="3" />
                        <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="5" />
                        <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="7" />
                        <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="9" />
                        <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="11" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="6" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="8" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="10" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="12" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
